
Deployment Installation
=======================

* Install Ubuntu 10.04 LTS Server
    - Mail Server (postfix)
        -> Select Internet Site
    - OpenSSH Server
    - apt-get install openssh-server postfix
    - apt-get install aptitude vim

* Configure Static Network
    - 192.168.5.131/255.255.255.0/192.168.5.10 (YLM)
    - dns on 8.8.8.8 8.8.4.4

* Updrade
    aptitude update
    aptitude safe-upgrade
    reboot

* Install base packages (as root):
    acpid git-core python-pip kannel mysql-server mysql-client sqlite3 python-mysqldb apache2-mpm-worker build-essential make cmake apache2-threaded-dev python-dev


    # python-gammu gammu ## if you don't need an up to date version

    # python-gammu build dep
    python-dev doxygen python-all-dev python-all-dbg python-sphinx python-support pkg-config libmysqlclient-dev libpq-dev libcurl4-gnutls-dev libusb-1.0-0-dev libdbd-sqlite3 sqlite3 libdbi0-dev libbluetooth-dev libgudev-1.0-dev libglib2.0-dev

    pip install virtualenv virtualenvwrapper

* Install Modem
    /etc/udev/rules.d/90-modem.rules

* Compiled packages

    wget http://modwsgi.googlecode.com/files/mod_wsgi-3.3.tar.gz -O mod_wsgi-3.3.tar.gz
    tar xf mod_wsgi-3.3.tar.gz
    cd mod_wsgi-3.3
    ./configure
    make
    make install
    vim -v /etc/apache2/mods-available/wsgi.load
        LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so
    a2enmod wsgi
    /etc/init.d/apache2 restart
    make clean

    cd ~/src/
    wget -c http://sourceforge.net/projects/gammu/files/gammu/1.30.0/gammu-1.30.0.tar.bz2 -O gammu-1.30.0.tar.bz2
    tar xf gammu-1.30.0.tar.bz2
    cd gammu-1.30.0
    ./configure
    make
    make install
    ln -s /home/pnlp/src/gammu-1.30.0/contrib/init/gammu-smsd.lsb /etc/init.d/gammu-smsd
    update-rc.d gammu-smsd defaults

    -> /etc/gammu-smsdrc
    -> /etc/gammurc

* Create User
    useradd -m -G adm,dialout,cdrom,plugdev,lpadmin,admin,sambashare -s /bin/bash pnlp

    useradd -r -l -G dialout gammu

* Get Source Code
    mkdir -p ~/src
    mkdir -p ~/src/envs
    vim -v .bashrc
    Add to end of file:
        export WORKON_HOME=~/src/envs
        source /usr/local/bin/virtualenvwrapper.sh
    logout / login
    mkvirtualenv pnlp
    cd ~/src
    git clone git://github.com/yeleman/nosms.git
    git clone git://github.com/yeleman/bolibana_auth.git
    git clone git://github.com/yeleman/bolibana_reporting.git
    git clone git://github.com/yeleman/pnlp2011.git
    cdsitepackages
    ln -s ~/src/nosms .
    ln -s ~/src/bolibana_auth .
    ln -s ~/src/bolibana_reporting .
    ln -s ~/src/pnlp2011 .
    ln -s ~/src/pnlp2011/pnlp_core .
    ln -s ~/src/pnlp2011/pnlp_web .
    ln -s ~/src/pnlp2011/pnlp_sms .
    cd ~/src/pnlp2011
    pip install -r pip-requirements.txt
    ln -s /home/pnlp/src/pnlp2011/docs/smsd.conf /etc/gammu-smsdrc
    ln -s /home/pnlp/src/pnlp2011/docs/smsd.defaults /etc/defaults/gammu-smsd

* Configure
    => configure /home/pnlp/src/nosms/settings.py (lucid need ~/.gammurc)
    sudo locale-gen en_US.UTF-8
    sudo locale-gen fr_FR.UTF-8
    - cp django.wsgi.example django.wsgi
    => customize it.
    - cp local_settings.py.example local_settings.py
    => customize it.
    - Create MySQL DB and User
    echo "grant all privileges on pnlp.* to 'pnlp'@'localhost' identified by 'pnlp' with grant option; flush privileges; create database pnlp;" | mysql -uroot -p
    - Django preparations
    ./manage.py syncdb
    ./manage.py loaddata ./fixtures/entities_types.json
    ./manage.py loaddata ./fixtures/role_permission.json
    ./manage.py loaddata ./fixtures/default_access.json
    ./manage.py loaddata ./fixtures/default_users.json
    ./manage.py runserver 0.0.0.0:8000
    /admin/
    > Site object PNLP / pnlp.sante.gov.ml

    - Create Gammu SQL
    echo "grant all privileges on pnlpsms.* to 'pnlpsms'@'localhost' identified by 'pnlpsms' with grant option; flush privileges; create database pnlpsms;" | mysql -uroot -p
    mysql -upnlpsms -ppnlpsms pnlpsms < ./docs/mysql.sql

* Web Server setup
    cp docs/pnlp.apache2 /etc/apache2/sites-available/pnlp
    a2enmod ssl
    a2enmod headers
    a2enmod expires
    a2ensite pnlp
    apache2ctl restart

* Services
    - web server
        update-rc.d apache2 defaults
        update-rc.d mysql-server defaults
    - NoSMS gammu_kannel (if using modem)
        cp /home/pnlp/src/pnlp2011/docs/gammu.upstart /etc/init/gammu_kannel.conf
    - Kannel (if SMPP)
        update-rc.d kannel defaults
    - NoSMS loop
        cp /home/pnlp/src/pnlp2011/docs/nosmsloop.upstart /etc/init/nosmsloop.conf

* Cron Jobs:
    - [pnlp] crontab -e
       #m h  dom mon dow   command
        0 8 * * * ~/src/pnlp2011/virtual-manage.sh pnlp_daily_tasks
        0 10 * * * ~/src/pnlp2011/virtual-manage.sh pnlp_daily_tasks
        0 12 * * * ~/src/pnlp2011/virtual-manage.sh pnlp_daily_tasks
        0 14 * * * ~/src/pnlp2011/virtual-manage.sh pnlp_daily_tasks
        0 16 * * * ~/src/pnlp2011/virtual-manage.sh pnlp_daily_tasks
    - [root] contab -e
        45 7 * * * /sbin/stop nosmsloop
        50 7 * * * /sbin/start nosmsloop
        0 20 * * * /sbin/stop gammu_kannel
        0 7  * * * /sbin/start gammu_kannel

* /etc/sudoers.d/pnlpdate
pnlp ALL= NOPASSWD: /bin/date
pnlp ALL= NOPASSWD: /usr/sbin/ntpdate-debian

pnlp ALL= NOPASSWD: /usr/bin/gammu-smsd
pnlp ALL= NOPASSWD: /usr/bin/service
gammu ALL= NOPASSWD: /usr/bin/gammu-smsd
gammu ALL= NOPASSWD: /usr/bin/service

* Kalkun
wget -O kalkun.tar.gz -c http://sourceforge.net/projects/kalkun/files/kalkun/0.3/kalkun_0.3.tar.gz/download
tar xf kalkun.tar.gz
apt-get install php5-cgi
a2enmod cgi
a2enmod cgid
cd /etc/apache2/mods-enabled
ln -sf ../mods-available/actions.load
ln -sf ../mods-available/actions.conf
-> /etc/apache2/mods-available/actions.conf
<IfModule mod_actions.c>
Action application/x-httpd-php /cgi-bin/php5
</IfModule>

